//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Duplicati.Library.Encryption.Strings {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class AESEncryption {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AESEncryption() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Duplicati.Library.Encryption.Strings.AESEncryption", typeof(AESEncryption).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the decryption fails using AES Crypt, dont attempt to use the previous encryption file format. This option is mutually exclusive with --{0}..
        /// </summary>
        internal static string AesencryptiondontallowfallbackLong {
            get {
                return ResourceManager.GetString("AesencryptiondontallowfallbackLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Don&apos;t attempt to decrypt fallback.
        /// </summary>
        internal static string AesencryptiondontallowfallbackShort {
            get {
                return ResourceManager.GetString("AesencryptiondontallowfallbackShort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicati uses the AES Crypt file format, but previous versions used a simpler encryption method. Use this flag to force the use of the previous format. This option is mutually exclusive with --{0}..
        /// </summary>
        internal static string AesencryptiondontuseaescryptLong {
            get {
                return ResourceManager.GetString("AesencryptiondontuseaescryptLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Don&apos;t use the AES Crypt file format.
        /// </summary>
        internal static string AesencryptiondontuseaescryptShort {
            get {
                return ResourceManager.GetString("AesencryptiondontuseaescryptShort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad key stretch.
        /// </summary>
        internal static string BadKeyStretchError {
            get {
                return ResourceManager.GetString("BadKeyStretchError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This module encrypts all files in the same way that AES Crypt does, using 256 bit AES encryption. Earlier versions of Duplicati used a simpler encryption model (still 256 bits) with no message digest. The commandline option --{0} can be used to revert to the previous model, which is not recommended. This module automatically detects the file format and decrypts it with the appropriate method..
        /// </summary>
        internal static string Description {
            get {
                return ResourceManager.GetString("Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AES-256 encryption, built in.
        /// </summary>
        internal static string DisplayName {
            get {
                return ResourceManager.GetString("DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not allowed to specify both --{0} and --{1} .
        /// </summary>
        internal static string OptionsAreMutuallyExclusiveError {
            get {
                return ResourceManager.GetString("OptionsAreMutuallyExclusiveError", resourceCulture);
            }
        }
    }
}
